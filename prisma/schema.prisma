generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  projectMembership  ProjectMembership[]
  projectInvitations ProjectInvitation[]
  tasksAssigned      Task[]              @relation(name: "TaskAssignments")
  notes              Notes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  status             ProjectStatus       @default(IN_PROGRESS)
  tasks              Task[]
  notes              Notes[]
  members            ProjectMembership[]
  projectInvitations ProjectInvitation[]
  dueDate            DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model ProjectMembership {
  id        Int         @id @default(autoincrement())
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ProjectInvitation {
  id          Int       @id @default(autoincrement())
  linkId      String    @unique
  maxUses     Int? // null is infinity
  uses        Int       @default(0)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  expires     DateTime?
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  priority    Priority    @default(MEDIUM)
  taskStatus  TaskStatus  @default(TO_DO)
  dueTime     DateTime?
  stages      TaskStage[]
  assignedTo  User[]      @relation(name: "TaskAssignments")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TaskStage {
  id          Int      @id @default(autoincrement())
  title       String
  isCompleted Boolean  @default(false)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notes {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TO_DO
  ON_GOING
  REVIEWING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
