generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  projectsOwned      Project[]           @relation(name: "ProjectOwner")
  projects           Project[]           @relation(name: "ProjectMembers")
  projectInvitations ProjectInvitation[]
  taskAssignments    TaskAssignment[]
  notes              Notes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  status             ProjectStatus       @default(IN_PROGRESS)
  owner              User                @relation(fields: [ownerId], references: [id], name: "ProjectOwner")
  ownerId            String
  Tasks              Task[]
  Notes              Notes[]
  projectInvitations ProjectInvitation[]
  members            User[]              @relation(name: "ProjectMembers")
  dueDate            DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model ProjectInvitation {
  id          Int      @id @default(autoincrement())
  email       String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  invitedBy   User     @relation(fields: [invitedById], references: [id])
  invitedById String
  accepted    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   Int
  priority    Priority         @default(MEDIUM)
  dueTime     DateTime?
  assignedTo  TaskAssignment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TaskAssignment {
  assigmentId  Int    @id @default(autoincrement())
  task         Task   @relation(fields: [taskId], references: [id])
  taskId       Int
  assignedTo   User   @relation(fields: [assignedToId], references: [id])
  assignedToId String
}

model Notes {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  Project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  TO_DO
  ON_GOING
  REVIEWING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
